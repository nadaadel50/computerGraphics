#include <windows.h>
#include <math.h>
#include <algorithm>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void InterpolatedColoredLine(HDC hdc, int x1, int y1, int x2, int y2, COLORREF
c1, COLORREF c2);
int counterOfPoints = 0;
POINT p1, p2;
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine,
int nCmdShow) {
WNDCLASS wc = { 0 };
wc.lpfnWndProc = WndProc;
wc.hInstance = hInstance;
wc.lpszClassName = TEXT("LineDrawing");
wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
wc.hCursor = LoadCursor(NULL, IDC_ARROW);
if (!RegisterClass(&wc)) return 0;
HWND hwnd = CreateWindow(wc.lpszClassName, TEXT("Draw Line"),
WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 800, 600,
NULL, NULL, hInstance, NULL);
ShowWindow(hwnd, nCmdShow);
UpdateWindow(hwnd);
MSG msg;
while (GetMessage(&msg, NULL, 0, 0)) {
TranslateMessage(&msg);
DispatchMessage(&msg);
}
return (int)msg.wParam;
}
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
switch (msg) {
case WM_LBUTTONDOWN: {
if (counterOfPoints == 0) {
p1.x = LOWORD(lParam);
p1.y = HIWORD(lParam);
counterOfPoints++;

}
else if(counterOfPoints == 1){
p2.x = LOWORD(lParam);
p2.y = HIWORD(lParam);
counterOfPoints = 0;
HDC hdc = GetDC(hwnd);
InterpolatedColoredLine(hdc, p1.x, p1.y, p2.x, p2.y, RGB(0, 255,

0), RGB(0, 0, 255));

ReleaseDC(hwnd, hdc);
}
} break;
case WM_PAINT: {
PAINTSTRUCT ps;
HDC hdc = BeginPaint(hwnd, &ps);
EndPaint(hwnd, &ps);
} break;

case WM_DESTROY:
PostQuitMessage(0);
break;
default:
return DefWindowProc(hwnd, msg, wParam, lParam);
}
return 0;
}
void InterpolatedColoredLine(HDC hdc, int x1, int y1, int x2, int y2, COLORREF
c1, COLORREF c2){
int alpha1 = x2 - x1;
int alpha2 = y2 - y1;
float r1 = GetRValue(c1);
float g1 = GetGValue(c1);
float b1 = GetBValue(c1);
float r2 = GetRValue(c2);
float g2 = GetGValue(c2);
float b2 = GetBValue(c2);
float step = 1.0 / std::max(abs(alpha1), abs(alpha2));
for(float t = 0; t <= 1; t+=step){

float x = alpha1*t + x1;
float y = alpha2*t + y1;
float redd = (r2-r1)*t + r1;
float greenn = (g2-g1)*t + g1;
float bluee = (b2-b1)*t + b1;
SetPixel(hdc, round(x), round(y), RGB(round(redd), round(greenn),
round(bluee)));
}
}
